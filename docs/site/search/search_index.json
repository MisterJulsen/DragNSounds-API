{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>DragNSounds is a simple Minecraft library mod that makes it possible to provide custom sounds on the server side and allow every player to hear them anywhere without resource packs. The API uses Minecraft's native sound engine and allows you to upload your own sounds to the server, as well as manage the uploaded files and manipulate sounds during playback with new features.</p> <p>Once added to your own project, the API can be used very easily through a few simple methods. The library can also be used as a standalone mod using the built-in commands, although the options are very limited then.</p> <ul> <li>Getting started</li> <li>Javadoc</li> <li>Features of this library as a standalone mod</li> </ul>"},{"location":"#why-dragnsounds","title":"Why \"DragNSounds\"?","text":"<p>Well, firstly it fits to the name of my other library DragonLib (which this mod is based on), but also because using this API should be as easy as dragging and dropping it into your project or the user's mods folder. And of course ... dragons! \ud83d\udc09</p>"},{"location":"#support","title":"Support","text":"<p>For Support and discussions please join the Discord server.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<p>This mod is based on Architectury API and DragonLib 2 (which includes Architectury) and uses JAVE2 for audio management.</p>"},{"location":"#supported-languages","title":"Supported languages","text":"<p>By default DragNSounds only supports English and German, but you can add translations for other languages in your mod's language file by adding the translation keys of this library.</p>"},{"location":"getting_started/","title":"Getting started","text":"<p>To start using the library in your mod, follow the steps below. You can find all available major versions of this mod on CurseForge or Modrinth.</p>"},{"location":"getting_started/#latest-versions","title":"Latest versions","text":"Minecraft Version 1.18.2 0.1.0"},{"location":"getting_started/#architectury-loom-setup","title":"Architectury Loom setup","text":"<ol> <li>Create a new Architectury project.</li> <li>Add the following content into the <code>build.gradle</code> file of your root project. <pre><code>subprojects {\n    repositories {\n        maven { // DragonLib, DragNSounds API\n            name = \"MrJulsen's Mod Resources\"\n            url = \"https://raw.githubusercontent.com/MisterJulsen/modsrepo/main/maven\"\n        }\n        maven { // Forge Config Api (required for fabric version of DragonLib)\n            name = \"Fuzs Mod Resources\"\n            url = \"https://raw.githubusercontent.com/Fuzss/modresources/main/maven/\"\n        }\n    }\n}\n</code></pre></li> <li>Add the following line to all <code>build.gradle</code> files of all your sub-projects (forge, fabric, common). Replace <code>&lt;LOADER&gt;</code> with the specific loader (e.g. <code>forge</code>) and use <code>fabric</code> in your common project. <pre><code>dependencies {\n    modApi(\"de.mrjulsen.dragnsoundsapi:dragnsounds-&lt;LOADER&gt;:&lt;MINECRAFT_VERSION&gt;-&lt;DRAGNSOUNDS_VERSION&gt;\")\n}\n</code></pre></li> <li>Add the dependencies to your mod. In the <code>forge</code> project, add this to your <code>mods.toml</code> file: <pre><code>[[dependencies.&lt;YOUR_MODID&gt;]]\nmodId=\"dragnsounds\"\nmandatory=true\nversionRange=\"[&lt;MINECRAFT_VERSION&gt;-&lt;DRAGNSOUNDS_VERSION&gt;,)\"\nordering=\"NONE\"\nside=\"BOTH\"\n</code></pre> ... and in the <code>fabric</code> project, add this to your <code>fabric.mod.json</code> file: <pre><code>\"depends\": {\n    \"dragnsounds\": \"&gt;=&lt;MINECRAFT_VERSION&gt;-&lt;DRAGNSOUNDS_VERSION&gt;\"\n},\n</code></pre></li> <li>Reload your project.</li> </ol>"},{"location":"API/api_info/","title":"API information","text":"<p>After setting up your project according to this guide you can get started straight away. The library works automatically and no further steps are required.</p> <p>To make use of the library's features, use the classes ClientApi (if you are working on the client side) and ServerApi (if you are working on the server side). There is also the Api class (for both sides), but this is rather unimportant for development. In general it can be said that everything you need is located inside the api package.</p> <p>Read the javadoc</p>"},{"location":"API/api_info/#differences-between-client-and-server","title":"Differences between client and server","text":"<p>Both the server and the client Api offer mostly the same methods, but with the difference that (depending on the page you are working on) the task must first be sent to the client or server to be executed.</p> <p>Data exchange (if neccessary) occurs automatically. However, it makes sense to start the command on the right side. Always remember that the client plays the sounds and the server offers the sound files.</p> <p>Example: If a Sound Player Block starts playing a sound, it makes sense to execute the command on the server side, as it can then load the sound data straight away and send it to the clients. The clients then receive the data and can begin playing the sound. The other way around, a request would first go to the server, which would then do the same steps.</p>"},{"location":"API/filters/","title":"Custom Filter","text":"<p>Some methods (e.g. the <code>getSoundFiles</code> methods in the ServerApi) can be passed a filter argument to filter the results. By default there are two predefined filters. However, if you want to add your own filter, follow these steps:</p> <ol> <li>Create a new class that either extends from AbstractFilter or (if more controllers are needed) implements the IFilter interface.</li> <li>Override the <code>isValid()</code> method and include an implementation of your filter.</li> <li>Now register the filter once in the FilterRegistry right at the beginning when loading the mod.</li> </ol>"},{"location":"API/index_file/","title":"Index File","text":"<p>The index file (<code>index.nbt</code>) contains all information about all sound files in the same SoundLocation directory. Only sound files registered in the index file can be used. Unknown files are usually cleaned up when the server starts.</p>"},{"location":"API/index_file/#structure","title":"Structure","text":"<pre><code>&gt; root\n|   &gt; Files\n|   |   &gt; sound_id_1\n|   |   |   &gt; Info\n|   |   |   |   &gt; Artist\n|   |   |   |   &gt; Album\n|   |   |   |   &gt; Title\n|   |   |   |   &gt; Channels\n|   |   |   |   &gt; Duration\n|   |   |   |   &gt; Genre\n|   |   |   |   &gt; Date\n|   |   |   |   &gt; UploadTime\n|   |   |   |   &gt; Size\n|   |   |   |   &gt; Owner\n|   |   |   &gt; Location\n|   |   |   |   &gt; Namespace\n|   |   |   |   &gt; Path\n|   |   |   &gt; Metadata\n|   |   |   |   &gt; DisplayName\n|   |   |   |   &gt; ...\n|   |   &gt; sound_id_2\n|   |   &gt; ...\n|   &gt; Version\n</code></pre>"},{"location":"API/index_file/#manipulation","title":"Manipulation","text":"<p>The file can be edited with any NBT editor. This means that you can theoretically delete registered sound files, adjust their data, force the information to be updated by removing the hash value or even insert new entries. However, this is not recommended as this can cause many problems when done incorrectly. It is best to use add-ons or commands for this.</p>"},{"location":"API/metadata/","title":"Custom Metadata","text":"<p>If you build your own mod with this library, you may want to store additional data with the uploaded sounds (e.g. for access management). Therefore you can use the metadata slot in the IndexFile.</p>"},{"location":"API/metadata/#add-your-own-metadata","title":"Add your own metadata","text":"<p>There are several ways to add your own metadata to a file, but they are all very simple:</p> <ul> <li><code>updateMetadata</code> in <code>SoundFile</code> allows you to add or update metadata while a file already exists. Key-value pairs are passed and then saved.</li> <li>When creating a new sound file (usually while uploading), metadata can be added.</li> </ul>"},{"location":"API/metadata/#read-metadata","title":"Read metadata","text":"<p>To read metadata you can use the <code>getMetadataSafe</code> or <code>getMetadata</code> method (to get all the metadata) in <code>SoundFile</code>. Pass the key of the data you want. If available, you will then receive a <code>String</code> with your data.</p>"},{"location":"API/metadata/#remove-custom-metadata","title":"Remove custom metadata","text":"<p>Metadata can also be removed at any time. To do this, use the <code>removeMetadata</code> method and pass a <code>Set&lt;String&gt;</code> with all the keys you want to remove. </p> <p>Warning</p> <p>You CANNOT remove the built-in metadata!</p>"},{"location":"API/sound_file/","title":"Sound File","text":"<p>The <code>SoundFile</code> contains alls information about a single audio file uplaoded to the server. The most important thing is how to localize them. For this, each sound file contains a SoundLocation and an Id (which corresponds to the file name). The path of a <code>SoundFile</code> therefore consists of the <code>String</code> representation of a SoundLocation with the ID appended. Example: <code>namespace:path/to/file/soundid</code></p> <p><code>SoundFiles</code> may only be generated by the server from an index file to ensure that all information is included.</p>"},{"location":"API/sound_file/#using-soundfile-in-commands","title":"Using SoundFile in commands","text":"<p>A <code>SoundFile</code> can also be used as a command argument. The <code>String</code> notation is used there. It is important to know that the real file name is used and not the display name, as it may be used multiple times or in an invalid format.</p> <p>To use a <code>SoundFile</code> in your own command you can use the SoundFileArgument.</p>"},{"location":"API/sound_location/","title":"Sound Location","text":"<p>The <code>SoundLocation</code> is similar to the <code>ResourceLocation</code>. It is used to describe the relative storage location for a sound file.</p> <p>A <code>SoundLocation</code> consists of two components, both of which are theoretically optional:</p> <ul> <li>Namespace: The first folder in the library's data folder</li> <li>Path: The path structure of all further subdirectories up to the folder in which the sound file is located.</li> </ul> <p>Tip</p> <p>It is strongly recommended to always specify a namespace to keep things organized. Best practice is that the namespace corresponds to the <code>MODID</code> or at least contains it if a mod uses multiple namespaces.</p> <p>The <code>String</code> representation of a <code>SoundLocation</code> is then similar to <code>ResourceLocation</code> in the following format: <pre><code>namespace:path/to/file\n</code></pre></p> <p>Example</p> <p>Also possible:</p> <ul> <li><code>namespace:</code> - The sound files are in the namespace folder.</li> <li><code>:</code> - The sound files are in the root folder (not recommended).</li> <li><code>namespace:/path</code> - The sound files are in the <code>namespace/path</code> folder. The <code>:/</code> is not neccessary, but it also doesn't matter.</li> </ul>"},{"location":"API/sound_location/#using-soundlocation-in-commands","title":"Using SoundLocation in commands","text":"<p>A <code>SoundLocation</code> can also be used as a command argument. The <code>String</code> notation is used there. It is important to note that although only existing <code>SoundLocations</code> are suggested, you can also create your own location in a command.</p> <p>To use a <code>SoundLocation</code> in your own command you can use the SoundLocationArgument.</p>"},{"location":"Mod/commands/","title":"Commands","text":"<p>This library not only provides an API for other projects, but with the built-in commands it can also be used as an independent mod with the basic features. This can be particularly interesting for data pack creators and server operators.</p>"},{"location":"Mod/commands/#sound","title":"/sound","text":"<p>The sound command and its sub-commands can be used to use the basic features of the library in Minecraft itself or via data packs.</p>"},{"location":"Mod/commands/#play","title":"<code>play</code>","text":"<pre><code>/sound play\n    &lt;file&gt;\n    [&lt;targets&gt;]\n    [&lt;source&gt;]\n    [&lt;volume&gt;]\n    [&lt;pitch&gt;]\n    [&lt;position&gt;]\n    [&lt;attenuationDistance&gt;]\n    [&lt;ticksOffset&gt;]\n    [&lt;showLabel&gt;]\n</code></pre> <p>Description</p> <p>Plays a specific sound for the specified amount of players, given the specified arguments.</p> <p>Arguments</p> Argument Description Default Type <code>file</code> The sound file that should be played. SoundFile <code>targets</code> Optional: Players for whom the sound should be played. <code>@s</code> EntitySelector <code>source</code> Optional: The sound source in which the sound should be played in. <code>CUSTOM</code> Enum <code>volume</code> Optional: The volume of the sound. Must be a value between <code>0.0</code> and <code>1.0</code>. <code>1.0</code> Float <code>pitch</code> Optional: The pitch of the sound. Must be a value between <code>0.5</code> and <code>2.0</code>. <code>1.0</code> Float <code>position</code> Optional: The position of the sound in the world. Only works for <code>Mono</code> sounds! <code>~ ~ ~</code> Vec3 <code>attenuationDistance</code> Optional: The attenuation distance of the sound in blocks. <code>16</code> Integer <code>ticksOffset</code> Optional: Fast forwards the sound the given number of ticks before playing. Value must be larger than 0. <code>0</code> Integer <code>showLabel</code> If <code>true</code>, a text will be displayed above the players' hotbar (like records) <code>false</code> Boolean <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#stop","title":"<code>stop</code>","text":"<pre><code>/sound stop\n    [&lt;targets&gt;]\n    [&lt;file&gt;]\n</code></pre> <p>Description</p> <p>Stops all playing instances of one or all sounds for the selected players.</p> <p>Arguments</p> Argument Description Default Type <code>targets</code> Optional: Players for whom the sound should be played. <code>@s</code> EntitySelector <code>file</code> Optional: The sound file that should be stopped. all SoundFile <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#upload","title":"<code>upload</code>","text":"<pre><code>/sound upload\n    &lt;location&gt;\n    &lt;displayName&gt;\n    [&lt;target&gt;]\n    [&lt;channels&gt; &lt;bitRate&gt; &lt;samplingRate&gt; &lt;quality&gt;]\n    [&lt;showProgress&gt;]\n</code></pre> <p>Description</p> <p>Opens a file picker dialog for the selected player where it can choose one sound file it want to upload.</p> <p>Arguments</p> Argument Description Default Type <code>file</code> The location where the sound should be stored. You can also create a new location. SoundLocation <code>displayName</code> A human-readable name for the sound which is displayed when playing the sound. String <code>target</code> Optional: One player who should upoad the sound. <code>@s</code> EntitySelector <code>channels</code> Optional: The audio channels the converted sound should have. (source) Enum <code>bitRate</code> Optional: The bit rate the converted sound should have. (source) Integer <code>samplingRate</code> Optional: The sampling rate the converted sound should have. (source) Integer <code>quality</code> Optional: The quality the converted sound should have. Must be a value between 0 and 10. <code>5</code> Byte <code>showProgress</code> Optional: When <code>true</code> the player will see an upload progress screen with a cancel option while uploading. <code>true</code> Boolean <p>Premission level required</p> <p>3</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#delete","title":"<code>delete</code>","text":"<pre><code>/sound delete\n    &lt;file&gt;\n</code></pre> <p>Description</p> <p>Deletes the selected file from the server. Sound instances of that file that are currently playing will continue playing.</p> <p>Arguments</p> Argument Description Default Type <code>file</code> The sound file which should be deleted. SoundFile <p>Premission level required</p> <p>3</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#cleanup","title":"<code>cleanUp</code>","text":"<pre><code>/sound cleanUp\n</code></pre> <p>Description</p> <p>Runs a clean up which will removed all unused sound files and empty sound locations. This action will be performed every time when the server starts.</p> <p>Premission level required</p> <p>3</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#showfolder","title":"<code>showFolder</code>","text":"<pre><code>/sound showFolder\n</code></pre> <p>Description</p> <p>Opens the folder where the sounds are stored.</p> <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client</p>"},{"location":"Mod/commands/#help","title":"<code>help</code>","text":"<pre><code>/sound help\n</code></pre> <p>Description</p> <p>Shows this documentation.</p> <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#modify","title":"<code>modify</code>","text":"<pre><code>/sound modify\n    &lt;target&gt;\n    &lt;file&gt;\n    &lt;volume|pitch|attenuationDistance|doppler|cone|pos|pause|resume|seek&gt;\n    ...\n</code></pre> <p>Description</p> <p>Modifies the playback sound for the selected players.</p> <p>Arguments</p> Argument Description Default Type <code>target</code> The player for whom the sound should be modified. <code>@s</code> EntitySelector <code>file</code> The sound file that should be modified. SoundFile <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#modify-volume","title":"<code>modify volume</code>","text":"<pre><code>/sound modify &lt;target&gt; &lt;file&gt; volume\n    &lt;volume&gt;\n</code></pre> <p>Description</p> <p>Modifies the volume of the sound.</p> <p>Arguments</p> Argument Description Default Type <code>volume</code> The new volume of the sound. Float <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#modify-pitch","title":"<code>modify pitch</code>","text":"<pre><code>/sound modify &lt;target&gt; &lt;file&gt; pitch\n    &lt;pitch&gt;\n</code></pre> <p>Description</p> <p>Modifies the pitch of the sound.</p> <p>Arguments</p> Argument Description Default Type <code>pitch</code> The new pitch of the sound. Float <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#modify-attenuationdistance","title":"<code>modify attenuationDistance</code>","text":"<pre><code>/sound modify &lt;target&gt; &lt;file&gt; attenuationDistance\n    &lt;distance&gt;\n</code></pre> <p>Description</p> <p>Modifies the attenuation distance.</p> <p>Arguments</p> Argument Description Default Type <code>attenuationDistance</code> The new attenuation distance of the sound. Integer <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#modify-doppler","title":"<code>modify doppler</code>","text":"<pre><code>/sound modify &lt;target&gt; &lt;file&gt; doppler\n    &lt;velocity&gt;\n    &lt;dopplerFactor&gt;\n</code></pre> <p>Description</p> <p>Enables the doppler effect for the sound.</p> <p>Arguments</p> Argument Description Default Type <code>velocity</code> The velocity of the sound source. Vec3 <code>dopplerFactor</code> The doppler factor value. Float <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#modify-cone","title":"<code>modify cone</code>","text":"<pre><code>/sound modify &lt;target&gt; &lt;file&gt; cone\n    &lt;direction&gt;\n    &lt;angleA&gt;\n    &lt;angleB&gt;\n    [&lt;outerGain&gt;]\n</code></pre> <p>Description</p> <p>Defines a cone area in which the sound can be heard. Useful to simulate directional speakers.</p> <p>Arguments</p> Argument Description Default Type <code>direction</code> The direction of the sound source. Vec3 <code>angleA</code> The first angle of the cone area. Float <code>angleB</code> The second angle of the cone area. Float <code>outerGain</code> Optional: The volume of the sound outside the defined bounds. Must be a value between <code>0.0</code> and <code>1.0</code>. <code>1.0</code> Float <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#modify-pos","title":"<code>modify pos</code>","text":"<pre><code>/sound modify &lt;target&gt; &lt;file&gt; pos\n    &lt;position&gt;\n</code></pre> <p>Description</p> <p>Changes the position of the sound source in the world.</p> <p>Arguments</p> Argument Description Default Type <code>pos</code> The new position of the sound. Vec3 <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#modify-pause","title":"<code>modify pause</code>","text":"<pre><code>/sound modify &lt;target&gt; &lt;file&gt; pause\n</code></pre> <p>Description</p> <p>Pauses the playback of the selected sound for the selected player.</p> <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#modify-resume","title":"<code>modify resume</code>","text":"<pre><code>/sound modify &lt;target&gt; &lt;file&gt; resume\n</code></pre> <p>Description</p> <p>Resumes the playback of the selected sound for the selected player.</p> <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/commands/#modify-seek","title":"<code>modify seek</code>","text":"<pre><code>/sound modify &lt;target&gt; &lt;file&gt; seek\n    &lt;ticks&gt;\n</code></pre> <p>Description</p> <p>Skips the given amount of ticks in the sound.</p> <p>Arguments</p> Argument Description Default Type <code>ticks</code> The amount if time in ticks to skip. Integer <p>Premission level required</p> <p>2</p> <p>Environment</p> <p>Client, Server</p>"},{"location":"Mod/config/","title":"Config","text":"<p>The mod also provides some config options which can be changed.</p> <p>Warning</p> <p>Please note that changes to the library's config affect ALL addons that use this api!</p>"},{"location":"Mod/config/#client","title":"Client","text":"Option Description Allowed Values Default <code>max_streaming_channels</code> The amount of streaming sound channels. By default, Minecraft has 8 streaming channels, but this mod increases it to 32. (Restart required) <code>8 - 255</code> <code>32</code>"},{"location":"Mod/config/#common","title":"Common","text":"Option Description Allowed Values Default <code>permission.sound_command_usage</code> Minimum permission level required to use the basic features of the /sound command, such as playing, stopping and modifying sounds. <code>0 - 4</code> <code>2</code> <code>permission.sound_command_management</code> Minimum permission level required to use all features of the /sound command, such as uploading and deleting sound files. <code>0 - 4</code> <code>3</code> <code>cleanup_on_server_start</code> If active, a file cleanup will be performed at server startup to clean up unreachable ('dead') files or empty folders. Boolean <code>true</code>"},{"location":"Mod/data_storage/","title":"Data Storage","text":""},{"location":"Mod/data_storage/#storage-location","title":"Storage location","text":"<p>All uploaded sound files are saved in a folder called <code>dragnsounds</code> in the <code>data</code> folder of the respective world. This folder usually contains several subfolders (depending on how many add-ons you have installed and how many subfolders each of them create). The subfolders on the first level are (when talking about SoundLocations) the so-called namespaces. The first sound files or further subfolders with files can be found within these namespaces.</p>"},{"location":"Mod/data_storage/#file-structure","title":"File structure","text":"<p>In every folder in which sound files have been uploaded, there is usually also an IndexFile file. While the sound files all have cryptic names to avoid problems with the length or the characters used in the file name, the IndexFile contains an entry for each sound file with the same name as the file, which contains all information about the sound file. This includes file information (playback duration, artist, ...), technical data (file hash, owner, ...) and metadata, including the entered display name.</p>"}]}