plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    
    modCompileOnly("com.electronwill.night-config:toml:3.6.0")
    modImplementation(include("de.mrjulsen.mcdragonlib:dragonlib-fabric:${rootProject.minecraft_version}-${rootProject.dragonlib_version}"))
    
    if (rootProject.includeDependencies.toBoolean()) {        
        modImplementation(include("ws.schild:jave-core:3.5.0"))
        modImplementation(include("ws.schild:jave-nativebin-linux32:3.5.0"))
        modImplementation(include("ws.schild:jave-nativebin-linux64:3.5.0"))
        modImplementation(include("ws.schild:jave-nativebin-linux-arm32:3.5.0"))
        modImplementation(include("ws.schild:jave-nativebin-linux-arm64:3.5.0"))
        modImplementation(include("ws.schild:jave-nativebin-win32:3.5.0"))
        modImplementation(include("ws.schild:jave-nativebin-win64:3.5.0"))
        modImplementation(include("ws.schild:jave-nativebin-osxm1:3.5.0"))
        modImplementation(include("ws.schild:jave-nativebin-osx64:3.5.0"))
    }    

    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
